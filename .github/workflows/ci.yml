name: CI Phase

env:
  BUILD_NUMBER: ${{ github.run_number }} 
  
on: 
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  Artifacts_Build_and_test:
    name: Build the java app
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write
    steps: 
      - name: Checkout source code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      
      - name: Setup JDK 11
        uses: actions/setup-java@v3
        with: 
          java-version: '11'
          distribution: 'corretto'

#      - name: Super-linter
 #       uses: super-linter/super-linter@v6.4.1  # x-release-please-version
  #      env:
   #       # To report GitHub Actions status checks
    #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #     DISABLE_ERRORS: false # this will pass this step ever with errors recorded.
        
      - name: Build source code with Maven
        run: mvn install 

      - name: check artifacts
        run: |
          ls -al target

      - name: Version artifacts
        run: |
          mv target/*.war target/vprofile-v2-${{ env.BUILD_NUMBER }}.war

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with: 
          name: vprofile-v2-${{ env.BUILD_NUMBER }}.war
          path: target/*.war

  Image_Build:
    name: Build app image
    runs-on: ubuntu-22.04
    needs: [ Artifacts_Build_and_test ]
    env: 
      repository_name: vprofile-app
      repository_user: saduasar
      #DOCKERHUB_USERNAME: saduasar
    steps: 
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build image    
        run: |
          docker build -t ${{ env.repository_user }}/${{ env.repository_name }}:${{ env.BUILD_NUMBER }} .
     
     # - name: Build and push
   #     uses: docker/build-push-action@v5
     #   with:
    #      push: false
     #     tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.repository_name }}:${{ github.run_number }}

      - name: Check app image
        run: |
          docker images

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.repository_user }}/${{ env.repository_name }}:${{ env.BUILD_NUMBER }}'
          format: 'table'
          exit-code: '0' #use 1 when specified vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image to repository
        run: |
          docker push ${{ env.repository_user }}/${{ env.repository_name }}:${{ env.BUILD_NUMBER }}
      
  infrastructure_setup:
    name: Setup k8s cluster for production
    runs-on: ubuntu-22.04
    needs: [ Image_Build ]
    steps:
      - name: Infrastructure code checkout 
        uses: actions/checkout@v4
      - name: Setup terraform environment
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: cd infrastructure && terraform fmt -check
        continue-on-error: true
  
      - name: Terraform Init
        id: init
        run: cd infrastructure && terraform init
  
      - name: Terraform Validate
        id: validate
        run: cd infrastructure && terraform validate -no-color
  
      - name: Terraform Plan
        id: plan
        run: cd infrastructure && terraform plan -var-file="production.tfvars" -no-color
        continue-on-error: false
  
      
      
      
    
    
    
    


          #####

    
    
    
      

  
  
  

